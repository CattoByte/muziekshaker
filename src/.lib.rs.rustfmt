use winit::{
    event::*,
    event_loop::{ControlFlow, EventLoop},
    window::{Window, WindowBuilder},
};

use wgpu::util::DeviceExt;

#[repr(C)]
#[derive(Copy, Clone, Debug, bytemuck::Pod, bytemuck::Zeroable)]
struct Vertex {
    position: [f32; 3],
    colour: [f32; 3],
}

impl Vertex {
    fn desc<'a>() -> wgpu::VertexBufferLayout<'a> {
        wgpu::VertexBufferLayout {
            array_stride: std::mem::size_of::<Vertex>() as wgpu::BufferAddress,
            step_mode: wgpu::VertexStepMode::Vertex,
            attributes: &[
                wgpu::VertexAttribute {
                    offset: 0,
                    shader_location: 0,
                    format: wgpu::VertexFormat::Float32x3,
                },
                wgpu::VertexAttribute {
                    offset: std::mem::size_of::<[f32; 3]>() as wgpu::BufferAddress,
                    shader_location: 1,
                    format: wgpu::VertexFormat::Float32x3,
                },
            ],
        }
    }
}

#[rustfmt::skip]
const VERTICES: &[Vertex] = &[
    Vertex { position: [-0.1,   -0.9,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.1,    -0.9,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.05,  -0.4,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.05,   -0.4,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.2,   -0.3,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.2,    -0.3,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.25,  -0.2,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.25,   -0.2,   0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.35,  0.0,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.35,   0.0,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.4,   0.2,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.4,    0.2,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.375, 0.4,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.375,  0.4,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.25,  0.6,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.25,   0.6,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.1,   0.8,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.1,    0.8,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [-0.05,  0.9,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.05,   0.9,    0.0],   colour: [1.0, 1.0, 1.0] },
    Vertex { position: [0.0,    1.0,    0.0],   colour: [1.0, 1.0, 1.0] },
];

#[rustfmt::skip]
const INDICES: &[u16] = &[
    0,  1,  2,
    3,  2,  1,
    2,  3,  4,
    5,  4,  3,
    4,  5,  6,
    7,  6,  5,
    6,  7,  8,  //here
    9,  7,  8,
    10,  9,  8,
    11,  10, 9,
    12, 11, 10,
    13, 12, 11,
    14, 13, 12,
    15, 14, 13,
    16, 15, 14,
    17, 16, 15,
    18, 17, 16,
    19, 18, 17,
    19, 20, 18,
];

struct State {
    surface: wgpu::Surface,
    device: wgpu::Device,
    queue: wgpu::Queue,
    config: wgpu::SurfaceConfiguration,
    size: winit::dpi::PhysicalSize<u32>,
    render_pipeline: wgpu::RenderPipeline,
    vertex_buffer: wgpu::Buffer,
    index_buffer: wgpu::Buffer,
    num_vertices: u32,
}

impl State {
    //Part of wgpu's initialization requires async code.
    async fn new(window: &Window, render_mode: wgpu::PolygonMode) -> Self {
        let size = window.inner_size();

        let instance = wgpu::Instance::new(wgpu::Backends::all()); //VK + MTL + DX12 (and WebGPU, but that one won't be used)
        let surface = unsafe { instance.create_surface(window) };
        let adapter = instance
            .request_adapter(&wgpu::RequestAdapterOptions {
                power_preference: wgpu::PowerPreference::default(),
                compatible_surface: Some(&surface),
                force_fallback_adapter: false,
            })
            .await
            .unwrap();

        let (device, queue) = adapter
            .request_device(
                &wgpu::DeviceDescriptor {
                    features: wgpu::Features::POLYGON_MODE_LINE
                        | wgpu::Features::POLYGON_MODE_POINT,
                    limits: wgpu::Limits::default(),
                    label: None,
                },
                None, //Trace path
            )
            .await
            .unwrap();

        let config = wgpu::SurfaceConfiguration {
            usage: wgpu::TextureUsages::RENDER_ATTACHMENT,
            format: surface.get_supported_formats(&adapter)[0],
            width: size.width,
            height: size.height,
            present_mode: wgpu::PresentMode::Fifo,
            alpha_mode: wgpu::CompositeAlphaMode::Auto,
        };
        surface.configure(&device, &config);

        let diffuse_bytes = include_bytes!("leaf.webp");
        let diffuse_image = image::load_from_memory(diffuse_bytes).unwrap();
        let diffuse_rgba = diffuse_image.to_rgba8();

        use image::GenericImageView;
        let dimensions = diffuse_image.dimensions();

        let texture_size = wgpu::Extend3d {
            width: dimensions.0,
            height: dimensions.1,
            depth_or_array_layers: 1,
        };

        let diffuse_texture = device.create_texture(&wgpu::TextureDescriptor {
            size: texture_size,
            mip_level_count: 1,
            sample_count: 1,
            dimension: wgpu::TextureDimension::D2,
            format: wgpu::TextureFormat::Rgba8UnormSrgb,
            usage: wgpu::TextureUsages::TEXTURE_BINDING | wgpu::TextureUsages::COPY_DST,
            label: Some("diffuse_texture"),
        });

        queue.write_texture(
            wgpu::ImageCopyTexture {
                texture: &diffuse_texture,
                mip_level: 0,
                origin: wgpu::Origin3d::ZERO,
                aspect: wgpu::TextureAspect::All,
            },
            &diffuse_rgba,
            wgpu::ImageDataLayout {
                offset: 0,
                bytes_per_row: std::num::NonZeroU32::new(4 * dimensions.0),
                rows_per_image: std::num::NonZeroU32::new(dimensions.1),
            },
            texture_size,
        );

        let diffuse_texture_view = diffuse_texture.create_view(&wgpu::TextureViewDescriptor::default());
        let diffuse_sampler = device.create_sampler(&wgpu::SamplerDescriptor {


        let shader = device.create_shader_module(wgpu::ShaderModuleDescriptor {
            label: Some("Shader"),
            source: wgpu::ShaderSource::Wgsl(include_str!("shader.wgsl").into()),
        }); // maybe replace the shader module with 'wgpu::include_wgsl!("shader.wgsl")'?

        let render_pipeline_layout =
            device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
                label: Some("Render Pipeline Layout"),
                bind_group_layouts: &[],
                push_constant_ranges: &[],
            });

        let render_pipeline = device.create_render_pipeline(&wgpu::RenderPipelineDescriptor {
            label: Some("Render Pipeline"),
            layout: Some(&render_pipeline_layout),
            vertex: wgpu::VertexState {
                module: &shader,
                entry_point: "vs_main",
                buffers: &[Vertex::desc()],
            },
            fragment: Some(wgpu::FragmentState {
                module: &shader,
                entry_point: "fs_main",
                targets: &[Some(wgpu::ColorTargetState {
                    format: config.format,
                    blend: Some(wgpu::BlendState::REPLACE),
                    write_mask: wgpu::ColorWrites::ALL,
                })],
            }),
            primitive: wgpu::PrimitiveState {
                topology: wgpu::PrimitiveTopology::TriangleList, // Fed triangles.
                strip_index_format: None,
                front_face: wgpu::FrontFace::Ccw, // A counter-clockwise face means that the triangle is facing forward.
                cull_mode: Some(wgpu::Face::Back), // The rest go into here.
                //polygon_mode: (|&mode| {if (mode == 0 as u8) {wgpu::PolygonMode::Fill} else {wgpu::PolygonMode::Fill}})(render_debug), // Anything else requires 'Features::NON_FILL_POLYGON'
                polygon_mode: render_mode,
                unclipped_depth: false,
                conservative: false,
            },
            depth_stencil: None,
            multisample: wgpu::MultisampleState {
                count: 1,
                mask: !0,
                alpha_to_coverage_enabled: false,
            },
            multiview: None,
        });

        let vertex_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
            label: Some("Vertex Buffer"),
            contents: bytemuck::cast_slice(VERTICES),
            usage: wgpu::BufferUsages::VERTEX,
        });

        let index_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
            label: Some("Index Buffer"),
            contents: bytemuck::cast_slice(INDICES),
            usage: wgpu::BufferUsages::INDEX,
        });
        let num_vertices = VERTICES.len() as u32;

        Self {
            surface,
            device,
            queue,
            config,
            size,
            render_pipeline,
            vertex_buffer,
            index_buffer,
            num_vertices,
        }
    }

    fn resize(&mut self, new_size: winit::dpi::PhysicalSize<u32>) {
        if new_size.width > 0 && new_size.height > 0 {
            self.size = new_size;
            self.config.width = new_size.width;
            self.config.height = new_size.height;
            self.surface.configure(&self.device, &self.config);
        }
    }

    fn input(&mut self, _event: &WindowEvent) -> bool {
        false //We don't need to captuare any events for the time being.
    }

    fn update(&mut self) {}

    fn render(&mut self) -> Result<(), wgpu::SurfaceError> {
        let output = self.surface.get_current_texture()?;
        let view = output
            .texture
            .create_view(&wgpu::TextureViewDescriptor::default());
        let mut encoder = self
            .device
            .create_command_encoder(&wgpu::CommandEncoderDescriptor {
                label: Some("Render Encoder"),
            });

        {
            //Needed to release mutable borrow
            let mut render_pass = encoder.begin_render_pass(&wgpu::RenderPassDescriptor {
                label: Some("Render Pass"),
                color_attachments: &[Some(wgpu::RenderPassColorAttachment {
                    view: &view,
                    resolve_target: None,
                    ops: wgpu::Operations {
                        load: wgpu::LoadOp::Clear(wgpu::Color {
                            r: 0.1,
                            g: 0.2,
                            b: 0.3,
                            a: 1.0,
                        }),
                        store: true,
                    },
                })],
                depth_stencil_attachment: None,
            });

            render_pass.set_pipeline(&self.render_pipeline);
            render_pass.set_vertex_buffer(0, self.vertex_buffer.slice(..));
            render_pass.set_index_buffer(self.index_buffer.slice(..), wgpu::IndexFormat::Uint16);
            render_pass.draw_indexed(0..self.num_vertices, 0, 0..1); // Three vertices, on instance.
        }
        self.queue.submit(std::iter::once(encoder.finish()));
        output.present();

        Ok(())
    }
}

pub async fn run() {
    env_logger::init();
    let event_loop = EventLoop::new();
    let window = WindowBuilder::new().build(&event_loop).unwrap();

    let mut render_mode = wgpu::PolygonMode::Fill;
    let mut state = State::new(&window, render_mode).await;

    event_loop.run(move |event, _, control_flow| match event {
        Event::WindowEvent {
            ref event,
            window_id,
        } if (window_id == window.id()) => {
            if !state.input(event) {
                match event {
                    WindowEvent::CloseRequested
                    | WindowEvent::KeyboardInput {
                        input:
                            KeyboardInput {
                                state: ElementState::Pressed,
                                virtual_keycode: Some(VirtualKeyCode::Escape),
                                ..
                            },
                        ..
                    } => *control_flow = ControlFlow::Exit,
                    WindowEvent::Resized(physical_size) => {
                        state.resize(*physical_size);
                    }
                    WindowEvent::ScaleFactorChanged { new_inner_size, .. } => {
                        state.resize(**new_inner_size);
                    }
                    WindowEvent::KeyboardInput {
                        input:
                            KeyboardInput {
                                state: ElementState::Pressed,
                                virtual_keycode: Some(VirtualKeyCode::F1),
                                ..
                            },
                        ..
                    } => {
                        if render_mode == wgpu::PolygonMode::Fill {
                            render_mode = wgpu::PolygonMode::Line;
                        } else if render_mode == wgpu::PolygonMode::Line {
                            render_mode = wgpu::PolygonMode::Point;
                        } else {
                            render_mode = wgpu::PolygonMode::Fill;
                        }
                        pollster::block_on(async {
                            state = State::new(&window, render_mode).await;
                        });
                    }
                    _ => {}
                }
            }
        }
        Event::RedrawRequested(window_id) if window_id == window.id() => {
            state.update();
            match state.render() {
                Ok(_) => {
                    state.resize(state.size);
                }
                Err(wgpu::SurfaceError::Lost) => {
                    state.resize(state.size);
                }
                Err(wgpu::SurfaceError::OutOfMemory) => *control_flow = ControlFlow::Exit,
                Err(e) => eprintln!("{:?}", e),
            }
        }
        Event::MainEventsCleared => {
            window.request_redraw();
        }
        _ => {}
    });
}
